# Задача: Система заметок (Notes)

## Описание
Создай REST API для управления заметками. Пользователь должен иметь
возможность создавать, читать, обновлять и удалять заметки,
а также закреплять важные и искать по заголовку.

## Шаг 1: Создай Entity класс Note
- Создай новый файл в папке `entity`
- Таблица должна хранить информацию о заметках
- Поля которые нужны:
  - id (генерируется автоматически)
  - title (заголовок заметки)
  - content (содержание заметки)
  - isPinned (закреплена ли заметка, по умолчанию false)
  - createdAt (дата создания)
  - updatedAt (дата последнего изменения)
- Используй правильные аннотации JPA
- Подумай какие типы данных использовать для каждого поля

## Шаг 2: Создай NoteRepository
- Создай интерфейс в папке `repository`
- Наследуйся от JpaRepository
- Добавь кастомные методы:
  - Метод для поиска всех закрепленных заметок
  - Метод для поиска заметок по заголовку (содержащих подстроку)
  - Метод для получения заметок отсортированных по дате создания
  - Подумай как должны называться методы чтобы Spring Data понял что делать

## Шаг 3: Создай DTO классы
Тебе понадобятся три DTO класса:

### CreateNoteDto:
- Что пользователь отправляет при создании заметки
- Поля: title, content
- isPinned можно не включать (по умолчанию false)
- Даты устанавливаются автоматически

### UpdateNoteDto:
- Что пользователь отправляет при обновлении
- Поля: title, content, isPinned
- updatedAt обновляется автоматически в сервисе

### NoteResponseDto:
- Что возвращается пользователю
- Все поля из entity
- Можешь добавить вычисляемые поля:
  - daysAgo (сколько дней назад создана)
  - preview (первые 100 символов content для списка)

## Шаг 4: Создай NoteController
Реализуй следующие endpoints:

- `POST /api/notes` - создать новую заметку
  - Принимает CreateNoteDto
  - Устанавливает createdAt и updatedAt = LocalDateTime.now()
  - Возвращает NoteResponseDto

- `GET /api/notes` - получить все заметки
  - Возвращает список NoteResponseDto
  - Сначала закрепленные, потом остальные

- `GET /api/notes/{id}` - получить конкретную заметку
  - Возвращает NoteResponseDto или 404

- `PUT /api/notes/{id}` - обновить заметку
  - Принимает UpdateNoteDto
  - Обновляет updatedAt = LocalDateTime.now()
  - Возвращает обновленную NoteResponseDto

- `DELETE /api/notes/{id}` - удалить заметку
  - Возвращает сообщение об успешном удалении или 404

- `PATCH /api/notes/{id}/pin` - закрепить/открепить заметку
  - Переключает состояние isPinned
  - Возвращает обновленную NoteResponseDto

- `GET /api/notes/search?title={query}` - поиск по заголовку
  - Ищет заметки содержащие query в заголовке
  - Возвращает список NoteResponseDto

## Шаг 5: Добавь дополнительный функционал
Добавь методы для работы с заметками:

- `GET /api/notes/pinned` - получить только закрепленные
- `GET /api/notes/recent?days={n}` - заметки за последние n дней
- `GET /api/notes/stats` - статистика:
  - Общее количество заметок
  - Количество закрепленных
  - Средняя длина заметки
  - Самая старая и новая заметка

## Подсказки:
- Для дат используй `LocalDateTime` вместо `LocalDate`
- Для поиска по подстроке используй `containing` в названии метода repository
- Для обновления только одного поля (pin) используй PATCH, а не PUT
- В UpdateNoteDto все поля могут быть nullable - обновляем только то, что пришло
- Помни про аннотации: `@Entity`, `@Table`, `@Id`, `@GeneratedValue`
- Для контроллера: `@RestController`, `@RequestMapping`, `@GetMapping`, `@PostMapping`, `@PutMapping`, `@PatchMapping`, `@DeleteMapping`
- Для параметров запроса используй `@RequestParam`

## Примеры методов в Repository:
```kotlin
// Найти закрепленные
fun findByIsPinnedTrue(): List<Note>

// Поиск по заголовку
fun findByTitleContainingIgnoreCase(title: String): List<Note>

// Сортировка
fun findAllByOrderByCreatedAtDesc(): List<Note>
```

## Как проверить:
1. Запусти приложение
2. Открой Swagger: http://localhost:8081/swagger-ui.html
3. Создай несколько заметок
4. Попробуй закрепить одну
5. Проверь поиск по заголовку
6. Обнови заметку и проверь что updatedAt изменилась
7. Удали заметку

Начни с Entity класса. Обрати внимание на работу с датами - при создании обе даты одинаковые, при обновлении меняется только updatedAt!