# Задача: История транзакций

## Описание
Создай функционал для отслеживания истории покупок и продаж криптовалют.
Пользователь должен иметь возможность записывать свои транзакции, просматривать их и фильтровать.

## Шаг 1: Создай Entity класс Transaction
- Создай новый файл в папке `entity`
- Таблица должна хранить информацию о транзакциях
- Поля которые нужны:
  - id (генерируется автоматически)
  - type (тип операции: "BUY" или "SELL")
  - symbol (какую монету купил/продал, например "BTC")
  - quantity (количество)
  - price (по какой цене совершена сделка)
  - date (дата транзакции)
- Используй правильные аннотации JPA
- Подумай какие типы данных использовать для каждого поля

## Шаг 2: Создай TransactionRepository
- Создай интерфейс в папке `repository`
- Наследуйся от JpaRepository
- Добавь кастомные методы:
  - Метод для поиска всех транзакций по типу (BUY или SELL)
  - Метод для поиска транзакций по символу
  - Подумай как должны называться методы чтобы Spring Data понял что делать

## Шаг 3: Создай DTO классы
Тебе понадобятся два DTO класса:

### CreateTransactionDto:
- Что пользователь отправляет при создании транзакции
- Подумай какие поля нужны (id точно не нужен)
- Дата может устанавливаться автоматически или приходить от пользователя

### TransactionResponseDto:
- Что возвращается пользователю
- Можешь добавить вычисляемые поля, например:
  - totalValue (quantity * price)
  - daysAgo (сколько дней назад была транзакция)

## Шаг 4: Создай TransactionController
Реализуй следующие endpoints:

- `POST /api/transactions` - создать новую транзакцию
  - Принимает CreateTransactionDto
  - Сохраняет в БД
  - Возвращает TransactionResponseDto

- `GET /api/transactions` - получить все транзакции
  - Возвращает список TransactionResponseDto

- `GET /api/transactions/{id}` - получить конкретную транзакцию
  - Возвращает TransactionResponseDto или ошибку если не найдена

- `GET /api/transactions/type/{type}` - получить транзакции по типу
  - type может быть "BUY" или "SELL"
  - Используй метод из repository

- `DELETE /api/transactions/{id}` - удалить транзакцию
  - Проверь существует ли транзакция перед удалением

## Шаг 5: Добавь дополнительный функционал
Добавь метод который покажет статистику:
- `GET /api/transactions/stats/{symbol}` - статистика по монете
  - Сколько всего куплено
  - Сколько всего продано
  - Средняя цена покупки
  - Средняя цена продажи

## Подсказки:
- Для работы с датами импортируй `java.time.LocalDate` или `java.time.LocalDateTime`
- Для денежных значений используй `BigDecimal`
- В контроллере можешь использовать `ResponseEntity` для более гибких ответов
- Помни про аннотации: `@Entity`, `@Table`, `@Id`, `@GeneratedValue`
- Для контроллера: `@RestController`, `@RequestMapping`, `@GetMapping`, `@PostMapping`, `@DeleteMapping`

## Как проверить:
1. Запусти приложение
2. Открой Swagger
3. Создай несколько транзакций (и покупки и продажи)
4. Проверь что все методы работают
5. Попробуй фильтрацию по типу

Начни с Entity класса. Если застрянешь - покажи свой код и опиши проблему!